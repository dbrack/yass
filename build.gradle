defaultTasks 'clean', 'todo', 'build', 'generateTypeScript', 'createPom', 'dist'

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'signing'

group = "ch.softappeal.yass"

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    tutorial
}

def websocket_dep = 'javax.websocket:javax.websocket-api:1.0'
def jetty_dep = 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.3.9.v20160517'
def undertow_dep = 'io.undertow:undertow-websockets-jsr:1.3.22.Final'
def junit_dep = 'junit:junit:4.12'

dependencies {
    compileOnly websocket_dep
    tutorialCompile sourceSets.main.output, jetty_dep, undertow_dep
    testCompile junit_dep, jetty_dep, undertow_dep
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint"
    options.compilerArgs << "-parameters"
    options.encoding = "US-ASCII"
}

task generateTypeScript(type: JavaExec) {
    main = 'ch.softappeal.yass.tutorial.initiator.web.GenerateTypeScript'
    classpath = sourceSets.tutorial.runtimeClasspath
    standardOutput = new OutputStream() {
        void write(int b) {
            // empty
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

jar {
    from "readme.md"
    from "license.txt"
    from "ts/yass.ts"
    manifest { attributes("Implementation-Version": "${version}") }
}

task packageSources(type: Jar) {
    from "readme.md"
    from "license.txt"
    from sourceSets.main.allSource
    classifier = 'sources'
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from "readme.md"
    from "license.txt"
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives(packageSources)
    archives(packageJavadoc)
}

task createPom << {
    pom {
        project {
            name project.name
            description 'Yet Another Service Solution'
            url 'https://github.com/softappeal/yass'
            licenses {
                license { name 'The BSD 3-Clause License' }
            }
            scm { url 'https://github.com/softappeal/yass' }
            organization { name 'softappeal GmbH Switzerland' }
            developers {
                developer { name 'Angelo Salvade' }
            }
        }
    }.writeTo("build/libs/${project.name}-${version}.pom")
}

task dist << {
    if (project.hasProperty('signing.password')) {
        def signPrefix = "build/libs/${project.name}-${version}"
        signing.sign(file("${signPrefix}.pom"))
        signing.sign(file("${signPrefix}.jar"))
        signing.sign(file("${signPrefix}-sources.jar"))
        signing.sign(file("${signPrefix}-javadoc.jar"))
    }
    ant.zip(destfile: "build/${project.name}-${version}_artifacts.zip") {
        fileset(dir: 'build/libs')
    }
}

def searchMarker(tree, divider1, divider2, title, marker) {
    println divider1
    println "= search: " + title
    tree.each { file ->
        def found = false
        def number = 0
        file.eachLine { line ->
            number++
            if (line.toLowerCase().contains(marker)) {
                if (!found) {
                    println divider2
                    println "+ " + file
                }
                found = true
                println "- " + number + ": " + line
            }
        }
    }
}

task todo << {
    def divider1 = "========================================================================================================================"
    def divider2 = "------------------------------------------------------------------------------------------------------------------------"
    def searchTree = fileTree(dir: '.').exclude('.git/').exclude('.gradle/').exclude('.idea/').exclude('build/')
    searchMarker(searchTree, divider1, divider2, 'abort', '$' + '$$' /* abort, not allowed for building a release */)
    searchMarker(searchTree, divider1, divider2, 'todo', '$' + 'todo' /* under construction, yet a release can still be built */)
    searchMarker(searchTree, divider1, divider2, 'note', '$' + 'note' /* important comment */)
    println divider1
}
