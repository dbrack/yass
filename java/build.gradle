plugins {
    id "com.github.spotbugs" version "1.6.0"
}

subprojects {

    apply plugin: 'java-library'

    ext {
        websocket_dep = 'javax.websocket:javax.websocket-api:1.0'
        jetty_dep = 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.4.8.v20171121'
        undertow_dep = 'io.undertow:undertow-websockets-jsr:1.4.22.Final'
        junit_dep = 'junit:junit:4.12'
    }

    group = "ch.softappeal.yass"

    repositories {
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }

    sourceSets {
        main { java { srcDir 'main' } }
        test { java { srcDir 'test' } }
    }

    dependencies {
        testCompile junit_dep
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint"
        options.compilerArgs << "-parameters"
        options.encoding = "US-ASCII"
    }

    tasks.withType(Javadoc) {
        // note: https://discuss.gradle.org/t/how-to-send-x-option-to-javadoc/23384
        options.addStringOption('Xdoclint:all,-missing', '-quiet')
        options.addStringOption('html5', '-quiet')
    }

    task packageSources(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    artifacts {
        archives(packageSources)
        archives(packageJavadoc)
    }

    apply plugin: 'maven'
    apply plugin: 'signing'

    task sign {
        doLast {
            pom {
                project {
                    name project.name
                    description 'Yet Another Service Solution'
                    url 'https://github.com/softappeal/yass'
                    licenses { license { name 'BSD-3-Clause' } }
                    scm { url 'https://github.com/softappeal/yass' }
                    organization { name 'softappeal GmbH Switzerland' }
                    developers { developer { name 'Angelo Salvade' } }
                }
            }.writeTo("build/libs/${project.name}-${version}.pom")
            if (rootProject.hasProperty('signing.password')) {
                file("build/libs").listFiles().each { signing.sign(it) }
            }
            ant.zip(destfile: "build/${project.name}-${version}_artifacts.zip") {
                fileset(dir: 'build/libs')
            }
        }
    }

    apply plugin: 'osgi'

    apply plugin: "com.github.spotbugs"

    spotbugs {
        toolVersion = '3.1.1'
        sourceSets = [sourceSets.main]
    }

}

task clean {
    doLast {
        ant.delete(dir: ".", includes: "*/out/", includeemptydirs: true)
    }
}
